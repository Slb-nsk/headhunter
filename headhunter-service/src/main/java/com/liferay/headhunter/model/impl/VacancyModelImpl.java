/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.headhunter.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.headhunter.model.Vacancy;
import com.liferay.headhunter.model.VacancyModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Vacancy service. Represents a row in the &quot;HH_Vacancy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>VacancyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VacancyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VacancyImpl
 * @generated
 */
public class VacancyModelImpl
	extends BaseModelImpl<Vacancy> implements VacancyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vacancy model instance should use the <code>Vacancy</code> interface instead.
	 */
	public static final String TABLE_NAME = "HH_Vacancy";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"vacancyId", Types.BIGINT},
		{"vacancyName", Types.VARCHAR}, {"employerName", Types.VARCHAR},
		{"createdAt", Types.VARCHAR}, {"salaryFrom", Types.INTEGER},
		{"salaryTo", Types.INTEGER}, {"salaryGross", Types.BOOLEAN},
		{"salaryCurrency", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vacancyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vacancyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdAt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salaryFrom", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("salaryTo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("salaryGross", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("salaryCurrency", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table HH_Vacancy (uuid_ VARCHAR(75) null,vacancyId LONG not null primary key,vacancyName VARCHAR(75) null,employerName VARCHAR(75) null,createdAt VARCHAR(75) null,salaryFrom INTEGER,salaryTo INTEGER,salaryGross BOOLEAN,salaryCurrency VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table HH_Vacancy";

	public static final String ORDER_BY_JPQL =
		" ORDER BY vacancy.vacancyId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY HH_Vacancy.vacancyId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long VACANCYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public VacancyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _vacancyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVacancyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _vacancyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Vacancy.class;
	}

	@Override
	public String getModelClassName() {
		return Vacancy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Vacancy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Vacancy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Vacancy, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Vacancy)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Vacancy, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Vacancy, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Vacancy)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Vacancy, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Vacancy, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Vacancy>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Vacancy.class.getClassLoader(), Vacancy.class, ModelWrapper.class);

		try {
			Constructor<Vacancy> constructor =
				(Constructor<Vacancy>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Vacancy, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Vacancy, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Vacancy, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Vacancy, Object>>();
		Map<String, BiConsumer<Vacancy, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Vacancy, ?>>();

		attributeGetterFunctions.put("uuid", Vacancy::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Vacancy, String>)Vacancy::setUuid);
		attributeGetterFunctions.put("vacancyId", Vacancy::getVacancyId);
		attributeSetterBiConsumers.put(
			"vacancyId", (BiConsumer<Vacancy, Long>)Vacancy::setVacancyId);
		attributeGetterFunctions.put("vacancyName", Vacancy::getVacancyName);
		attributeSetterBiConsumers.put(
			"vacancyName",
			(BiConsumer<Vacancy, String>)Vacancy::setVacancyName);
		attributeGetterFunctions.put("employerName", Vacancy::getEmployerName);
		attributeSetterBiConsumers.put(
			"employerName",
			(BiConsumer<Vacancy, String>)Vacancy::setEmployerName);
		attributeGetterFunctions.put("createdAt", Vacancy::getCreatedAt);
		attributeSetterBiConsumers.put(
			"createdAt", (BiConsumer<Vacancy, String>)Vacancy::setCreatedAt);
		attributeGetterFunctions.put("salaryFrom", Vacancy::getSalaryFrom);
		attributeSetterBiConsumers.put(
			"salaryFrom", (BiConsumer<Vacancy, Integer>)Vacancy::setSalaryFrom);
		attributeGetterFunctions.put("salaryTo", Vacancy::getSalaryTo);
		attributeSetterBiConsumers.put(
			"salaryTo", (BiConsumer<Vacancy, Integer>)Vacancy::setSalaryTo);
		attributeGetterFunctions.put("salaryGross", Vacancy::getSalaryGross);
		attributeSetterBiConsumers.put(
			"salaryGross",
			(BiConsumer<Vacancy, Boolean>)Vacancy::setSalaryGross);
		attributeGetterFunctions.put(
			"salaryCurrency", Vacancy::getSalaryCurrency);
		attributeSetterBiConsumers.put(
			"salaryCurrency",
			(BiConsumer<Vacancy, String>)Vacancy::setSalaryCurrency);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getVacancyId() {
		return _vacancyId;
	}

	@Override
	public void setVacancyId(long vacancyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vacancyId = vacancyId;
	}

	@Override
	public String getVacancyName() {
		if (_vacancyName == null) {
			return "";
		}
		else {
			return _vacancyName;
		}
	}

	@Override
	public void setVacancyName(String vacancyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vacancyName = vacancyName;
	}

	@Override
	public String getEmployerName() {
		if (_employerName == null) {
			return "";
		}
		else {
			return _employerName;
		}
	}

	@Override
	public void setEmployerName(String employerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employerName = employerName;
	}

	@Override
	public String getCreatedAt() {
		if (_createdAt == null) {
			return "";
		}
		else {
			return _createdAt;
		}
	}

	@Override
	public void setCreatedAt(String createdAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdAt = createdAt;
	}

	@Override
	public int getSalaryFrom() {
		return _salaryFrom;
	}

	@Override
	public void setSalaryFrom(int salaryFrom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salaryFrom = salaryFrom;
	}

	@Override
	public int getSalaryTo() {
		return _salaryTo;
	}

	@Override
	public void setSalaryTo(int salaryTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salaryTo = salaryTo;
	}

	@Override
	public boolean getSalaryGross() {
		return _salaryGross;
	}

	@Override
	public boolean isSalaryGross() {
		return _salaryGross;
	}

	@Override
	public void setSalaryGross(boolean salaryGross) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salaryGross = salaryGross;
	}

	@Override
	public String getSalaryCurrency() {
		if (_salaryCurrency == null) {
			return "";
		}
		else {
			return _salaryCurrency;
		}
	}

	@Override
	public void setSalaryCurrency(String salaryCurrency) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salaryCurrency = salaryCurrency;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Vacancy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Vacancy toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Vacancy>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VacancyImpl vacancyImpl = new VacancyImpl();

		vacancyImpl.setUuid(getUuid());
		vacancyImpl.setVacancyId(getVacancyId());
		vacancyImpl.setVacancyName(getVacancyName());
		vacancyImpl.setEmployerName(getEmployerName());
		vacancyImpl.setCreatedAt(getCreatedAt());
		vacancyImpl.setSalaryFrom(getSalaryFrom());
		vacancyImpl.setSalaryTo(getSalaryTo());
		vacancyImpl.setSalaryGross(isSalaryGross());
		vacancyImpl.setSalaryCurrency(getSalaryCurrency());

		vacancyImpl.resetOriginalValues();

		return vacancyImpl;
	}

	@Override
	public int compareTo(Vacancy vacancy) {
		long primaryKey = vacancy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Vacancy)) {
			return false;
		}

		Vacancy vacancy = (Vacancy)object;

		long primaryKey = vacancy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Vacancy> toCacheModel() {
		VacancyCacheModel vacancyCacheModel = new VacancyCacheModel();

		vacancyCacheModel.uuid = getUuid();

		String uuid = vacancyCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			vacancyCacheModel.uuid = null;
		}

		vacancyCacheModel.vacancyId = getVacancyId();

		vacancyCacheModel.vacancyName = getVacancyName();

		String vacancyName = vacancyCacheModel.vacancyName;

		if ((vacancyName != null) && (vacancyName.length() == 0)) {
			vacancyCacheModel.vacancyName = null;
		}

		vacancyCacheModel.employerName = getEmployerName();

		String employerName = vacancyCacheModel.employerName;

		if ((employerName != null) && (employerName.length() == 0)) {
			vacancyCacheModel.employerName = null;
		}

		vacancyCacheModel.createdAt = getCreatedAt();

		String createdAt = vacancyCacheModel.createdAt;

		if ((createdAt != null) && (createdAt.length() == 0)) {
			vacancyCacheModel.createdAt = null;
		}

		vacancyCacheModel.salaryFrom = getSalaryFrom();

		vacancyCacheModel.salaryTo = getSalaryTo();

		vacancyCacheModel.salaryGross = isSalaryGross();

		vacancyCacheModel.salaryCurrency = getSalaryCurrency();

		String salaryCurrency = vacancyCacheModel.salaryCurrency;

		if ((salaryCurrency != null) && (salaryCurrency.length() == 0)) {
			vacancyCacheModel.salaryCurrency = null;
		}

		return vacancyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Vacancy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Vacancy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Vacancy, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Vacancy)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Vacancy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Vacancy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Vacancy, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Vacancy)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Vacancy>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _vacancyId;
	private String _vacancyName;
	private String _employerName;
	private String _createdAt;
	private int _salaryFrom;
	private int _salaryTo;
	private boolean _salaryGross;
	private String _salaryCurrency;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Vacancy, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Vacancy)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("vacancyId", _vacancyId);
		_columnOriginalValues.put("vacancyName", _vacancyName);
		_columnOriginalValues.put("employerName", _employerName);
		_columnOriginalValues.put("createdAt", _createdAt);
		_columnOriginalValues.put("salaryFrom", _salaryFrom);
		_columnOriginalValues.put("salaryTo", _salaryTo);
		_columnOriginalValues.put("salaryGross", _salaryGross);
		_columnOriginalValues.put("salaryCurrency", _salaryCurrency);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("vacancyId", 2L);

		columnBitmasks.put("vacancyName", 4L);

		columnBitmasks.put("employerName", 8L);

		columnBitmasks.put("createdAt", 16L);

		columnBitmasks.put("salaryFrom", 32L);

		columnBitmasks.put("salaryTo", 64L);

		columnBitmasks.put("salaryGross", 128L);

		columnBitmasks.put("salaryCurrency", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Vacancy _escapedModel;

}